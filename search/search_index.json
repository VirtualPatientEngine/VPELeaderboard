{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Team VPE's Leaderboard Repository! This project provides an interactive framework for biomodel simulation and time series prediction. By integrating AI-driven time series models, we extend traditional biomodel simulations to forecast future states based on initial conditions.</p> <p>(This repository is a work in progress..)</p> <ul> <li> <p> Get Started</p> <p>Kickstart your journey with VPE Leaderboard \u2013 install the PyPI package and follow an easy step-by-step guide for effortless setup.</p> <p>Get Started</p> </li> <li> <p> Data</p> <p>Discover datasets integrated seamlessly into the framework for streamlined analysis and experimentation.</p> <p>Explore Data</p> </li> <li> <p> Algorithms</p> <p>Discover cutting-edge algorithms designed for time series forecasting and predictive modeling.</p> <p>Explore Algorithms</p> </li> <li> <p> Leaderboard</p> <p>Explore algorithmic outputs and performance metrics in the leaderboard to evaluate and compare results effortlessly.</p> <p>Explore Leaderboard</p> </li> </ul>"},{"location":"algorithms/","title":"Algorithms","text":"Algorithm Metrics <p>This page was last updated on 2025-05-05 11:23:30 UTC</p>"},{"location":"algorithms/#algorithm_metrics","title":"Algorithm Metrics Table","text":"Algorithm Metric 1 Metric 2 Metric 3 Algo 1 0.86 0.35 0.8 Algo 2 0.94 0.32 0.9 Algo 3 0.91 0.34 0.83 Algo 4 0.89 0.33 0.87 Algo 5 0.82 0.29 0.97 Algo 6 0.82 0.34 0.81 Algo 7 0.81 0.21 0.85 Algo 8 0.93 0.23 0.93 Algo 9 0.89 0.21 0.8 Algo 10 0.91 0.25 0.77 Algo 11 0.8 0.26 0.82 Algo 12 0.95 0.24 0.79 Algo 13 0.92 0.32 0.97 Algo 14 0.83 0.25 0.94 Algo 15 0.83 0.24 0.9 Algo 16 0.83 0.28 0.96 Algo 17 0.85 0.22 0.94 Algo 18 0.88 0.32 0.79 Algo 19 0.86 0.21 0.96 Algo 20 0.84 0.35 0.88 Algo 21 0.89 0.32 0.94 Algo 22 0.82 0.23 0.97 Algo 23 0.84 0.2 0.83 Algo 24 0.85 0.32 0.78 Algo 25 0.87 0.31 0.8 Algo 26 0.92 0.31 0.85 Algo 27 0.83 0.32 0.95 Algo 28 0.88 0.21 0.96 Algo 29 0.89 0.25 0.75 Algo 30 0.81 0.22 0.87 Algo 31 0.89 0.33 0.85 Algo 32 0.83 0.29 0.8 Algo 33 0.81 0.25 0.78 Algo 34 0.94 0.21 0.83 Algo 35 0.94 0.25 0.98 Algo 36 0.92 0.25 0.83 Algo 37 0.85 0.31 0.87 Algo 38 0.81 0.3 0.92 Algo 39 0.9 0.33 0.84 Algo 40 0.87 0.27 0.98 Algo 41 0.82 0.22 0.98 Algo 42 0.87 0.31 0.81 Algo 43 0.81 0.31 0.87 Algo 44 0.94 0.28 0.82 Algo 45 0.84 0.32 0.82 Algo 46 0.9 0.27 0.76 Algo 47 0.85 0.28 0.9 Algo 48 0.88 0.26 0.87 Algo 49 0.88 0.2 0.76 Algo 50 0.83 0.22 0.82"},{"location":"data/","title":"Data Overview","text":"Time-series Forecasting Articles <p>This page was last updated on 2025-05-05 11:23:35 UTC</p>"},{"location":"data/#algorithm_metrics","title":"System Biology Models","text":"Abstract Model Name Number of Species Number of Parameters visibility_off Teusink2000_Glycolysis 26 15 <p> Can yeast glycolysis be understood in terms of in vitro kinetics of the constituent enzymes? Testing biochemistry. Teusink,B et al.: Eur J Biochem 2000 Sep;267(17):5313-29.            The model reproduces the steady-state fluxes and metabolite concentrations of the branched model as given in Table 4 of the paper. It is derived from the model on JWS online, but has the ATP consumption in the succinate branch with the same stoichiometrie as in the publication. The model was successfully tested on copasi v.4.4(build 26).                 For Vmax values, please note that there is a conversion factor of approx. 270 to convert from U/mg-protein as shown in Table 1 of the paper to mmol/(min*L_cytosol). The equilibrium constant for the ADH reaction in the paper is given for the reverse reaction (Keq = 1.45*10      <sup>4</sup>           ). The value used in this model is for the forward reaction: 1/Keq = 6.9*10      <sup>-5</sup>           .                 Vmax parameters values used (in [mM/min] except VmGLT):       VmGLT 97.264 mmol/min VmGLK 226.45 VmPGI 339.667 VmPFK 182.903 VmALD 322.258 VmGAPDH_f 1184.52 VmGAPDH_r 6549.68 VmPGK 1306.45 VmPGM 2525.81 VmENO 365.806 VmPYK 1088.71 VmPDC 174.194 VmG3PDH 70.15            The result of the G6P steady state concentration (marked in red) differs slightly from the one given in table 4. of the publication                 Results for steady state:       orig. article this model Fluxes[mM/min] Glucose\u00a0 88\u00a0 88\u00a0 Ethanol\u00a0 129\u00a0 129\u00a0 Glycogen\u00a0 6\u00a0 6\u00a0 Trehalose\u00a0 4.8\u00a0 4.8\u00a0 (G6P flux through trehalose branch) Glycerol\u00a0 18.2\u00a0 18.2\u00a0 Succinate\u00a0 3.6\u00a0 3.6\u00a0 Conc.[mM] G6P\u00a0 1.07\u00a0 1.03\u00a0 F6P\u00a0 0.11\u00a0 0.11\u00a0 F1,6P\u00a0 0.6\u00a0 0.6\u00a0 DHAP\u00a0 0.74\u00a0 0.74\u00a0 3PGA\u00a0 0.36\u00a0 0.36\u00a0 2PGA\u00a0 0.04\u00a0 0.04\u00a0 PEP\u00a0 0.07\u00a0 0.07\u00a0 PYR\u00a0 8.52\u00a0 8.52\u00a0 AcAld\u00a0 0.17\u00a0 0.17\u00a0 ATP\u00a0 2.51\u00a0 2.51\u00a0 ADP\u00a0 1.29\u00a0 1.29\u00a0 AMP\u00a0 0.3\u00a0 0.3\u00a0 NAD\u00a0 1.55\u00a0 1.55\u00a0 NADH\u00a0 0.04\u00a0 0.04\u00a0            Authors of the publication also mentioned a few misprints in the original article:                 in the kinetic law for      ADH           :      <ol> <li>the species          a               should denote          NAD               and          b Ethanol</li> <li>the last term in the equation should read          bpq               /(          K            <sub>ib</sub>                 K            <sub>iq</sub>                 K            <sub>p</sub>               )          </li> </ol>           in the kinetic law for      PFK           :      <ol> <li>R = 1 + \u03bb          <sub>1</sub>               + \u03bb          <sub>2</sub>               + g          <sub>r</sub>               \u03bb          <sub>1</sub>               \u03bb          <sub>2</sub></li> <li>equation L  should read: L = L0*(..)          <sup>2</sup>               *(..)          <sup>2</sup>               *(..)          <sup>2</sup>               not L = L0*(..)          <sup>2</sup>               *(..)          <sup>2</sup>               *(..)          </li> </ol>           To make the model easier to curate, the species      ATP           ,      ADP           and      AMP           were added. These are calculated via assignment rules from the active phosphate species,      P           , and the sum of all      AXP           ,      SUM_P           .      </p> <p>To the extent possible under law, all copyright and related or neighbouring rights to this encoded model have been dedicated to the public domain worldwide. Please refer to      CC0 Public Domain Dedication           for more information.      </p> <p>In summary, you are entitled to use this encoded model in absolutely any manner you deem suitable, verbatim, or with modification, alone or embedded it in a larger context, redistribute it, commercially or not, in a restricted way or not.</p> <p>To cite BioModels Database, please use:      Li C, Donizelli M, Rodriguez N, Dharuri H, Endler L, Chelliah V, Li L, He E, Henry A, Stefan MI, Snoep JL, Hucka M, Le Nov\u00e8re N, Laibe C (2010) BioModels Database: An enhanced, curated and annotated resource for published quantitative kinetic models. BMC Syst Biol., 4:92.</p> visibility_off Dwivedi2014 - Crohns IL6 Disease model - Anti-IL6R Antibody 44 53 Dwivedi2014 - Crohns IL6 Disease model - Anti-IL6R Antibody This model is comprised of four models:  <ul> <li> [BIOMD0000000534]   Healthy Volunteer model   </li> <li> [BIOMD0000000535]   Crohn's Disease - IL-6 Antibody   </li> <li> [BIOMD0000000536]   Crohn's Disease - sgp130FC</li> <li> [BIOMD0000000537]   Crohn's Disease - IL-6Ra Antibody   </li> </ul>Possible avenues for Interleukin-6 (IL-6) inhibition in treating Crohn's disease are compared here. Each model refers to separate ligands. The system simulates differential activity of the ligands on the signalling of IL-6.  This affects Signal Transducer and Activator of Transcription 3 (STAT3) activity on the production of biomarker C-Reactive Protein (CRP) expression. Figures referring to this Crohn's Disease model are 3a, 4d, 4e, 4f and 5b.  <p>This model is described in the article:</p> A multiscale model of     interleukin-6-mediated immune regulation in Crohn's disease and     its application in drug discovery and development. Dwivedi G, Fitz L, Hegen M, Martin   SW, Harrold J, Heatherington A, Li C. CPT Pharmacometrics Syst Pharmacol   2014; 3: e89 <p>Abstract:</p> <p>In this study, we have developed a multiscale systems model     of interleukin (IL)-6-mediated immune regulation in Crohn's     disease, by integrating intracellular signaling with     organ-level dynamics of pharmacological markers underlying the     disease. This model was linked to a general pharmacokinetic     model for therapeutic monoclonal antibodies and used to     comparatively study various biotherapeutic strategies targeting     IL-6-mediated signaling in Crohn's disease. Our work     illustrates techniques to develop mechanistic models of disease     biology to study drug-system interaction. Despite a sparse     training data set, predictions of the model were qualitatively     validated by clinical biomarker data from a pilot trial with     tocilizumab. Model-based analysis suggests that strategies     targeting IL-6, IL-6R?, or the IL-6/sIL-6R? complex are less     effective at suppressing pharmacological markers of Crohn's     than dual targeting the IL-6/sIL-6R? complex in addition to     IL-6 or IL-6R?. The potential value of multiscale system     pharmacology modeling in drug discovery and development is also     discussed.CPT: Pharmacometrics &amp; Systems Pharmacology     (2014) 3, e89; doi:10.1038/psp.2013.64; advance online     publication 8 January 2014.</p> <p>This model is hosted on    BioModels Database   and identified by:    BIOMD0000000537.</p> <p>To cite BioModels Database, please use:    BioModels Database:   An enhanced, curated and annotated resource for published   quantitative kinetic models.</p> <p>To the extent possible under law, all copyright and related or   neighbouring rights to this encoded model have been dedicated to   the public domain worldwide. Please refer to    CC0   Public Domain Dedication for more information.</p> visibility_off Tang2020 - Estimation of transmission risk of COVID-19 and impact of public health interventions 8 16 <p>Since the emergence of the first cases in Wuhan, China, the novel coronavirus (2019-nCoV) infection has been quickly spreading out to other provinces and neighboring countries. Estimation of the basic reproduction number by means of mathematical modeling can be helpful for determining the potential and severity of an outbreak and providing critical information for identifying the type of disease interventions and intensity. A deterministic compartmental model was devised based on the clinical progression of the disease, epidemiological status of the individuals, and intervention measures. The estimations based on likelihood and model analysis show that the control reproduction number may be as high as 6.47 (95% CI 5.71\u20137.23). Sensitivity analyses show that interventions, such as intensive contact tracing followed by quarantine and isolation, can effectively reduce the control reproduction number and transmission risk, with the effect of travel restriction adopted by Wuhan on 2019-nCoV infection in Beijing being almost equivalent to increasing quarantine by a 100 thousand baseline value. It is essential to assess how the expensive, resource-intensive measures implemented by the Chinese authorities can contribute to the prevention and control of the 2019-nCoV infection, and how long they should be maintained. Under the most restrictive measures, the outbreak is expected to peak within two weeks (since 23 January 2020) with a significant low peak value. With travel restriction (no imported exposed individuals to Beijing), the number of infected individuals in seven days will decrease by 91.14% in Beijing, compared with the scenario of no travel restriction.</p>"},{"location":"data/#how_to_contribute","title":"How To Add Your Models","text":"<p>       To contribute new models to the leaderboard, please follow the instructions in the Model Submission Guide section. This guide provides the necessary steps for preparing and submitting your models, ensuring they are automatically validated and integrated into the leaderboard system via our CI/CD pipeline.     </p>"},{"location":"data/basico_model/","title":"Basico Model","text":"<p>BasicoModel class for loading SBML models using the basico package.</p>"},{"location":"data/basico_model/#vpeleaderboard.data.src.basico_model.BasicoModel","title":"<code>BasicoModel</code>","text":"<p>               Bases: <code>SysBioModel</code></p> <p>Model that loads SBML models using the basico package. Ensures a single instance per component.</p> Source code in <code>vpeleaderboard/data/src/basico_model.py</code> <pre><code>class BasicoModel(SysBioModel):\n    \"\"\"\n    Model that loads SBML models using the basico package.\n    Ensures a single instance per component.\n    \"\"\"\n    sbml_file_path: str = Field(..., description=\"Path to an SBML file \")\n    simulation_results: Optional[Any] = Field(None, exclude=True)\n    name: Optional[str] = \"\"\n    description: Optional[str] = \"\"\n    copasi_model: Optional[object] = Field(None, exclude=True)\n\n    def __init__(self, sbml_file_path: str ,\n                 name: Optional[str] = \"\", description: Optional[str] = \"\"):\n        super().__init__(sbml_file_path=sbml_file_path,\n                         name=name, description=description)\n        # sbml_file_path = os.path.abspath(sbml_file_path)\n        self.sbml_file_path = sbml_file_path\n        self.validate_sbml_file_path()\n\n    def validate_sbml_file_path(self):\n        \"\"\"\n        Validate that the SBML folder exists and contains XML files.\n        \"\"\"\n        if not self.sbml_file_path:\n            raise ValueError(\"SBML file must be provided.\")\n\n        if not os.path.exists(self.sbml_file_path):\n            raise ValueError(f\"SBML file not found: {self.sbml_file_path}\")\n\n    def get_model_metadata(self) -&gt; Dict[str, Union[str, int]]:\n        \"\"\"\n        Retrieve metadata for a single SBML model.\n        \"\"\"\n        # file_path = os.path.join(self.sbml_file_path)\n        copasi_model = basico.load_model(self.sbml_file_path)\n        model_name = basico.model_info.get_model_name(model=copasi_model)\n        species_count = len(basico.model_info.get_species(model=copasi_model))\n        parameter_count = len(basico.model_info.get_parameters(model=copasi_model))\n        model_description = basico.model_info.get_notes(model=copasi_model)\n\n        return {\n            \"Model Name\": model_name,\n            \"Number of Species\": species_count,\n            \"Number of Parameters\": parameter_count,\n            \"Description\": model_description.strip()\n\n        }\n</code></pre>"},{"location":"data/basico_model/#vpeleaderboard.data.src.basico_model.BasicoModel.get_model_metadata","title":"<code>get_model_metadata()</code>","text":"<p>Retrieve metadata for a single SBML model.</p> Source code in <code>vpeleaderboard/data/src/basico_model.py</code> <pre><code>def get_model_metadata(self) -&gt; Dict[str, Union[str, int]]:\n    \"\"\"\n    Retrieve metadata for a single SBML model.\n    \"\"\"\n    # file_path = os.path.join(self.sbml_file_path)\n    copasi_model = basico.load_model(self.sbml_file_path)\n    model_name = basico.model_info.get_model_name(model=copasi_model)\n    species_count = len(basico.model_info.get_species(model=copasi_model))\n    parameter_count = len(basico.model_info.get_parameters(model=copasi_model))\n    model_description = basico.model_info.get_notes(model=copasi_model)\n\n    return {\n        \"Model Name\": model_name,\n        \"Number of Species\": species_count,\n        \"Number of Parameters\": parameter_count,\n        \"Description\": model_description.strip()\n\n    }\n</code></pre>"},{"location":"data/basico_model/#vpeleaderboard.data.src.basico_model.BasicoModel.validate_sbml_file_path","title":"<code>validate_sbml_file_path()</code>","text":"<p>Validate that the SBML folder exists and contains XML files.</p> Source code in <code>vpeleaderboard/data/src/basico_model.py</code> <pre><code>def validate_sbml_file_path(self):\n    \"\"\"\n    Validate that the SBML folder exists and contains XML files.\n    \"\"\"\n    if not self.sbml_file_path:\n        raise ValueError(\"SBML file must be provided.\")\n\n    if not os.path.exists(self.sbml_file_path):\n        raise ValueError(f\"SBML file not found: {self.sbml_file_path}\")\n</code></pre>"},{"location":"data/loading_model/","title":"How to Load and Contribute SBML Models","text":"<p>This guide outlines the correct procedure for contributing SBML models to the Virtual Patient Leaderboard repository. By following these instructions, your models will be automatically validated, processed, and integrated into the leaderboard system via CI/CD.</p>"},{"location":"data/loading_model/#required-files","title":"Required Files","text":"<p>To submit a model, you must provide both of the following:</p> File Type Naming Example Target Directory SBML Model File <code>your_model.xml</code> <code>vpeleaderboard/data/models/</code> YAML Configuration File <code>your_model.yaml</code> <code>vpeleaderboard/data/configs/</code> <p>\u26a0\ufe0f Kindly ensure both files are present when submitting your model. Submissions with only one file will not be processed. Every XML model file must have a corresponding YAML configuration file with the same base name.</p>"},{"location":"data/loading_model/#folder-structure-reference","title":"Folder Structure Reference","text":"<p>Ensure your file placement adheres to this structure:</p> <pre><code>vpeleaderboard/data/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 your_model.xml\n|   \u2514\u2500\u2500 BIOMD0000000537_url.xml\n\u251c\u2500\u2500 configs/\n\u2502   \u2514\u2500\u2500 your_model.yaml\n|   \u2514\u2500\u2500 BIOMD0000000537_url.yaml\n</code></pre> <p>Please ensure that both the XML file and the corresponding YAML configuration file share the same base name.  Submissions that do not follow this structure will fail the automated GitHub Actions validation.</p>"},{"location":"data/loading_model/#how-to-add-a-new-model","title":"How to add a new model","text":""},{"location":"data/loading_model/#1-fork-the-repository","title":"1. Fork the Repository","text":"<p>Navigate to the repository and click the \u201cFork\u201d button in the top-right corner of the repository on GitHub to create a copy under your GitHub account.</p>"},{"location":"data/loading_model/#2-clone-your-fork-locally","title":"2. Clone Your Fork Locally","text":"<pre><code>git clone https://github.com/&lt;your-username&gt;/&lt;repo-name&gt;.git\ncd &lt;repo-name&gt;\n</code></pre>"},{"location":"data/loading_model/#3-create-a-new-branch","title":"3. Create a New Branch","text":"<p>Ensure you use a descriptive branch name that clearly reflects the purpose of your changes:</p> <p><pre><code>git checkout -b add-new-your_model\n</code></pre> This helps maintain clarity and consistency across the project, making it easier to track changes and collaborate effectively.</p>"},{"location":"data/loading_model/#4-add-your-files","title":"4. Add Your Files","text":""},{"location":"data/loading_model/#yaml-configuration-parameters","title":"YAML Configuration Parameters","text":"<p>Each SBML model must be accompanied by a .yaml configuration file that defines the simulation durations. These parameters control how long the model runs for training, validation, and testing phases during automated processing.</p> <p>Your <code>.yaml</code> file must include the following fields:</p> Key Type Description <code>train_duration</code> <code>int</code> Defines the duration (in simulation time units) allocated for the training phase of the model. This value should match the scale of the model's dataset. <code>val_duration</code> <code>int</code> Defines the duration (in simulation time units) allocated for the validation phase. <code>test_duration</code> <code>int</code> Defines the duration (in simulation time units) allocated for the testing phase. Should align with testing scenarios in the model\u2019s intended use. <p>Example Configuration</p> <pre><code>train_duration: 6\nval_duration: 3\ntest_duration: 5\n</code></pre> <ul> <li> <p>Put the XML model file into the models/ directory.</p> </li> <li> <p>Put the YAML configuration file into the configs/ directory.</p> </li> </ul> <p>\u26a0\ufe0f Make sure both files follow the naming conventions described above and that a YAML file is provided for every XML model file.</p>"},{"location":"data/loading_model/#5-commit-and-push-your-changes","title":"5. Commit and Push Your Changes","text":"<pre><code>git add models/your_model.xml configs/your_model.yaml\ngit commit -m \"Add model your_model with configuration\"\ngit push origin add-new-model-your_model\n</code></pre>"},{"location":"data/loading_model/#6-open-a-pull-request-pr","title":"6. Open a Pull Request (PR)","text":"<ol> <li>Go to your fork on GitHub.</li> <li>Click \"Compare &amp; pull request\".</li> <li>Set the base branch to <code>main</code> of the original repository.</li> <li>Provide a clear and concise title and description.</li> <li>Click \"Create pull request\".</li> </ol> <p>Virtual Patient Engine Docs</p>"},{"location":"data/sbml_dataloader/","title":"SBML Dataloader","text":"<p>This module handles loading and simulating SBML models using PyTorch Lightning.</p>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule","title":"<code>SBMLDataModule</code>","text":"<p>               Bases: <code>LightningDataModule</code></p> <p>A LightningDataModule for simulating and loading SBML-based time course data.</p> Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>class SBMLDataModule(LightningDataModule):\n    \"\"\"\n    A LightningDataModule for simulating and loading SBML-based time course data.\n    \"\"\"\n\n    class SBMLTimeCourseDataset(IterableDataset):\n        \"\"\"\n        Dataset class for iterating over SBML simulation results.\n        \"\"\"\n\n        def __init__(self, data: Any):\n            \"\"\"\n            Args:\n                data (Any): Data to be used in the dataset (e.g., pandas DataFrame).\n            \"\"\"\n            self.data = data\n\n        def __iter__(self):\n            \"\"\"\n            Iterator method for the dataset.\n\n            Yields:\n                torch.Tensor: Each row in the dataset as a tensor.\n            \"\"\"\n            for _, row in self.data.iterrows():\n                yield torch.tensor(row.values, dtype=torch.float)\n\n        def __getitem__(self, index: int):\n            raise NotImplementedError(\"Indexing is not supported for this IterableDataset.\")\n\n    def __init__(self, file_name: str):\n        \"\"\"\n        Initializes the SBMLDataModule with the given SBML model file name.\n\n        Args:\n            file_name (str): The name of the SBML model to load.\n        \"\"\"\n        super().__init__()\n        self.fine_name = file_name\n\n        self.config = None\n        self.sbml_file_path = None\n        self.copasi_model: Optional[Any] = None\n\n        self._is_prepared = False\n        self._is_setup = False\n\n    def prepare_data(self) -&gt; None:\n        \"\"\"\n        Loads YAML config and locates the SBML file.\n\n        This method will locate and load the YAML configuration file, validate its contents,\n        and check for the necessary SBML model file.\n\n        Raises:\n            FileNotFoundError: If the SBML model or YAML config file is not found.\n            ValueError: If the YAML config file is empty or missing required keys.\n        \"\"\"\n        script_dir = os.path.dirname(__file__)\n        script_dir = \"\\\\\".join(script_dir.split(\"\\\\\")[:-1])\n        script_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n        with hydra.initialize(version_base=None,\n                              config_path=\"../../configs\"):\n            cfg = hydra.compose(config_name=\"config\")\n\n        model_directory = os.path.join(script_dir, cfg.model_directory)\n        model_directory = os.path.abspath(model_directory)\n\n        sbml_path = os.path.join(model_directory, f\"{self.fine_name}.xml\")\n        if not os.path.exists(sbml_path):\n            raise FileNotFoundError(\n                f\"SBML model file not found for model '{self.fine_name}'. \"\n                f\"Expected at: {sbml_path}\"\n            )\n        self.sbml_file_path = sbml_path\n        yaml_file = os.path.join(script_dir, \"../configs/data\", f\"{self.fine_name}.yaml\")\n        if not os.path.exists(yaml_file):\n            raise FileNotFoundError(f\"YAML file not found: {yaml_file}\")\n\n        with open(yaml_file, 'r', encoding='utf-8') as file:\n            self.config = yaml.safe_load(file)\n\n        if not self.config:\n            raise ValueError(f\"YAML config {yaml_file} is empty or malformed.\")\n\n        required_keys = ['train_duration', 'test_duration', 'val_duration']\n        missing_keys = [key for key in required_keys\n                        if key not in self.config or self.config[key] is None]\n        if missing_keys:\n            raise ValueError(\n                f\"Missing required key(s) in YAML config {yaml_file}: {', '.join(missing_keys)}\"\n            )\n\n        self._is_prepared = True\n\n    def setup(self, stage: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Loads the SBML model only after prepare_data has been called.\n\n        Args:\n            stage (Optional[str]): The stage of setup, typically used in multi-stage setups.\n\n        Raises:\n            RuntimeError: If `prepare_data()` has not been called before `setup()`.\n            FileNotFoundError: If the SBML file is not found.\n        \"\"\"\n        if not self._is_prepared:\n            raise RuntimeError(\"You must call `prepare_data()` before `setup()`.\")\n\n        if not os.path.exists(self.sbml_file_path):\n            raise FileNotFoundError(f\"SBML model file not found: {self.sbml_file_path}\")\n\n        self.copasi_model = basico.load_model(self.sbml_file_path)\n\n    def train_dataloader(self) -&gt; DataLoader:\n        \"\"\"\n        Creates the DataLoader for the training dataset based on the SBML simulation results.\n\n        Returns:\n            DataLoader: The DataLoader for the training dataset.\n        \"\"\"\n        train_df = basico.run_time_course(\n            duration=self.config['train_duration'],\n            use_initial_values=False\n        )\n        dataset = self.SBMLTimeCourseDataset(train_df)\n        return DataLoader(dataset)\n    def val_dataloader(self) -&gt; DataLoader:\n        \"\"\"\n        Creates the DataLoader for the validating dataset based on the SBML simulation results.\n\n        Returns:\n            DataLoader: The DataLoader for the validating dataset.\n        \"\"\"\n        val_df = basico.run_time_course(\n            duration=self.config['val_duration'],\n            use_initial_values=False\n        )\n        dataset = self.SBMLTimeCourseDataset(val_df)\n        return DataLoader(dataset)\n\n    def test_dataloader(self) -&gt; DataLoader:\n        \"\"\"\n        Creates the DataLoader for the test dataset based on the SBML simulation results.\n\n        Returns:\n            DataLoader: The DataLoader for the test dataset.\n        \"\"\"\n        test_df = basico.run_time_course(\n            duration=self.config['test_duration'],\n            automatic=False,\n            use_initial_values=False,\n            update_model=False\n        )\n        dataset = self.SBMLTimeCourseDataset(test_df)\n        return DataLoader(dataset)\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.SBMLTimeCourseDataset","title":"<code>SBMLTimeCourseDataset</code>","text":"<p>               Bases: <code>IterableDataset</code></p> <p>Dataset class for iterating over SBML simulation results.</p> Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>class SBMLTimeCourseDataset(IterableDataset):\n    \"\"\"\n    Dataset class for iterating over SBML simulation results.\n    \"\"\"\n\n    def __init__(self, data: Any):\n        \"\"\"\n        Args:\n            data (Any): Data to be used in the dataset (e.g., pandas DataFrame).\n        \"\"\"\n        self.data = data\n\n    def __iter__(self):\n        \"\"\"\n        Iterator method for the dataset.\n\n        Yields:\n            torch.Tensor: Each row in the dataset as a tensor.\n        \"\"\"\n        for _, row in self.data.iterrows():\n            yield torch.tensor(row.values, dtype=torch.float)\n\n    def __getitem__(self, index: int):\n        raise NotImplementedError(\"Indexing is not supported for this IterableDataset.\")\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.SBMLTimeCourseDataset.__init__","title":"<code>__init__(data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to be used in the dataset (e.g., pandas DataFrame).</p> required Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>def __init__(self, data: Any):\n    \"\"\"\n    Args:\n        data (Any): Data to be used in the dataset (e.g., pandas DataFrame).\n    \"\"\"\n    self.data = data\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.SBMLTimeCourseDataset.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterator method for the dataset.</p> <p>Yields:</p> Type Description <p>torch.Tensor: Each row in the dataset as a tensor.</p> Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>def __iter__(self):\n    \"\"\"\n    Iterator method for the dataset.\n\n    Yields:\n        torch.Tensor: Each row in the dataset as a tensor.\n    \"\"\"\n    for _, row in self.data.iterrows():\n        yield torch.tensor(row.values, dtype=torch.float)\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.__init__","title":"<code>__init__(file_name)</code>","text":"<p>Initializes the SBMLDataModule with the given SBML model file name.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The name of the SBML model to load.</p> required Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>def __init__(self, file_name: str):\n    \"\"\"\n    Initializes the SBMLDataModule with the given SBML model file name.\n\n    Args:\n        file_name (str): The name of the SBML model to load.\n    \"\"\"\n    super().__init__()\n    self.fine_name = file_name\n\n    self.config = None\n    self.sbml_file_path = None\n    self.copasi_model: Optional[Any] = None\n\n    self._is_prepared = False\n    self._is_setup = False\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.prepare_data","title":"<code>prepare_data()</code>","text":"<p>Loads YAML config and locates the SBML file.</p> <p>This method will locate and load the YAML configuration file, validate its contents, and check for the necessary SBML model file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the SBML model or YAML config file is not found.</p> <code>ValueError</code> <p>If the YAML config file is empty or missing required keys.</p> Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>def prepare_data(self) -&gt; None:\n    \"\"\"\n    Loads YAML config and locates the SBML file.\n\n    This method will locate and load the YAML configuration file, validate its contents,\n    and check for the necessary SBML model file.\n\n    Raises:\n        FileNotFoundError: If the SBML model or YAML config file is not found.\n        ValueError: If the YAML config file is empty or missing required keys.\n    \"\"\"\n    script_dir = os.path.dirname(__file__)\n    script_dir = \"\\\\\".join(script_dir.split(\"\\\\\")[:-1])\n    script_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n    with hydra.initialize(version_base=None,\n                          config_path=\"../../configs\"):\n        cfg = hydra.compose(config_name=\"config\")\n\n    model_directory = os.path.join(script_dir, cfg.model_directory)\n    model_directory = os.path.abspath(model_directory)\n\n    sbml_path = os.path.join(model_directory, f\"{self.fine_name}.xml\")\n    if not os.path.exists(sbml_path):\n        raise FileNotFoundError(\n            f\"SBML model file not found for model '{self.fine_name}'. \"\n            f\"Expected at: {sbml_path}\"\n        )\n    self.sbml_file_path = sbml_path\n    yaml_file = os.path.join(script_dir, \"../configs/data\", f\"{self.fine_name}.yaml\")\n    if not os.path.exists(yaml_file):\n        raise FileNotFoundError(f\"YAML file not found: {yaml_file}\")\n\n    with open(yaml_file, 'r', encoding='utf-8') as file:\n        self.config = yaml.safe_load(file)\n\n    if not self.config:\n        raise ValueError(f\"YAML config {yaml_file} is empty or malformed.\")\n\n    required_keys = ['train_duration', 'test_duration', 'val_duration']\n    missing_keys = [key for key in required_keys\n                    if key not in self.config or self.config[key] is None]\n    if missing_keys:\n        raise ValueError(\n            f\"Missing required key(s) in YAML config {yaml_file}: {', '.join(missing_keys)}\"\n        )\n\n    self._is_prepared = True\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.setup","title":"<code>setup(stage=None)</code>","text":"<p>Loads the SBML model only after prepare_data has been called.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Optional[str]</code> <p>The stage of setup, typically used in multi-stage setups.</p> <code>None</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If <code>prepare_data()</code> has not been called before <code>setup()</code>.</p> <code>FileNotFoundError</code> <p>If the SBML file is not found.</p> Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>def setup(self, stage: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Loads the SBML model only after prepare_data has been called.\n\n    Args:\n        stage (Optional[str]): The stage of setup, typically used in multi-stage setups.\n\n    Raises:\n        RuntimeError: If `prepare_data()` has not been called before `setup()`.\n        FileNotFoundError: If the SBML file is not found.\n    \"\"\"\n    if not self._is_prepared:\n        raise RuntimeError(\"You must call `prepare_data()` before `setup()`.\")\n\n    if not os.path.exists(self.sbml_file_path):\n        raise FileNotFoundError(f\"SBML model file not found: {self.sbml_file_path}\")\n\n    self.copasi_model = basico.load_model(self.sbml_file_path)\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.test_dataloader","title":"<code>test_dataloader()</code>","text":"<p>Creates the DataLoader for the test dataset based on the SBML simulation results.</p> <p>Returns:</p> Name Type Description <code>DataLoader</code> <code>DataLoader</code> <p>The DataLoader for the test dataset.</p> Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>def test_dataloader(self) -&gt; DataLoader:\n    \"\"\"\n    Creates the DataLoader for the test dataset based on the SBML simulation results.\n\n    Returns:\n        DataLoader: The DataLoader for the test dataset.\n    \"\"\"\n    test_df = basico.run_time_course(\n        duration=self.config['test_duration'],\n        automatic=False,\n        use_initial_values=False,\n        update_model=False\n    )\n    dataset = self.SBMLTimeCourseDataset(test_df)\n    return DataLoader(dataset)\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.train_dataloader","title":"<code>train_dataloader()</code>","text":"<p>Creates the DataLoader for the training dataset based on the SBML simulation results.</p> <p>Returns:</p> Name Type Description <code>DataLoader</code> <code>DataLoader</code> <p>The DataLoader for the training dataset.</p> Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>def train_dataloader(self) -&gt; DataLoader:\n    \"\"\"\n    Creates the DataLoader for the training dataset based on the SBML simulation results.\n\n    Returns:\n        DataLoader: The DataLoader for the training dataset.\n    \"\"\"\n    train_df = basico.run_time_course(\n        duration=self.config['train_duration'],\n        use_initial_values=False\n    )\n    dataset = self.SBMLTimeCourseDataset(train_df)\n    return DataLoader(dataset)\n</code></pre>"},{"location":"data/sbml_dataloader/#vpeleaderboard.data.src.sbml_dataloader.SBMLDataModule.val_dataloader","title":"<code>val_dataloader()</code>","text":"<p>Creates the DataLoader for the validating dataset based on the SBML simulation results.</p> <p>Returns:</p> Name Type Description <code>DataLoader</code> <code>DataLoader</code> <p>The DataLoader for the validating dataset.</p> Source code in <code>vpeleaderboard/data/src/sbml_dataloader.py</code> <pre><code>def val_dataloader(self) -&gt; DataLoader:\n    \"\"\"\n    Creates the DataLoader for the validating dataset based on the SBML simulation results.\n\n    Returns:\n        DataLoader: The DataLoader for the validating dataset.\n    \"\"\"\n    val_df = basico.run_time_course(\n        duration=self.config['val_duration'],\n        use_initial_values=False\n    )\n    dataset = self.SBMLTimeCourseDataset(val_df)\n    return DataLoader(dataset)\n</code></pre>"},{"location":"data/sys_bio_model/","title":"System Bio Model","text":"<p>An abstract base class for Models in the data module.</p>"},{"location":"data/sys_bio_model/#vpeleaderboard.data.src.sys_bio_model.SysBioModel","title":"<code>SysBioModel</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>Abstract base class for Models in the data section, allowing different mathematical approaches to be implemented in subclasses.</p> <p>This class enforces a standard interface for models working with SBML (Systems Biology Markup Language) files.</p> Source code in <code>vpeleaderboard/data/src/sys_bio_model.py</code> <pre><code>class SysBioModel(BaseModel, ABC):\n    \"\"\"\n    Abstract base class for Models in the data section, allowing\n    different mathematical approaches to be implemented in subclasses.\n\n    This class enforces a standard interface for models working\n    with SBML (Systems Biology Markup Language) files.\n    \"\"\"\n    sbml_file_path: str = Field(..., description=\"Path to an SBML file\")\n    name: Optional[str] = Field(..., description=\"Name of the model\")\n    description: Optional[str] = Field(\"\", description=\"Description of the model\")\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if not self.sbml_file_path:\n            raise ValueError(\"sbml_file_path must be provided.\")\n\n    @abstractmethod\n    def get_model_metadata(self) -&gt; pd.DataFrame:\n        \"\"\"\n        Abstract method to retrieve metadata of the SBML model.\n\n        This method must be implemented in subclasses to extract and return\n        relevant details about the SBML model, such as its structure, components,\n        and parameters.\n\n        Returns:\n            pd.DataFrame: A pandas DataFrame containing the metadata of the model.\n        \"\"\"\n</code></pre>"},{"location":"data/sys_bio_model/#vpeleaderboard.data.src.sys_bio_model.SysBioModel.get_model_metadata","title":"<code>get_model_metadata()</code>  <code>abstractmethod</code>","text":"<p>Abstract method to retrieve metadata of the SBML model.</p> <p>This method must be implemented in subclasses to extract and return relevant details about the SBML model, such as its structure, components, and parameters.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A pandas DataFrame containing the metadata of the model.</p> Source code in <code>vpeleaderboard/data/src/sys_bio_model.py</code> <pre><code>@abstractmethod\ndef get_model_metadata(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Abstract method to retrieve metadata of the SBML model.\n\n    This method must be implemented in subclasses to extract and return\n    relevant details about the SBML model, such as its structure, components,\n    and parameters.\n\n    Returns:\n        pd.DataFrame: A pandas DataFrame containing the metadata of the model.\n    \"\"\"\n</code></pre>"},{"location":"leaderboard/","title":"Leaderboard","text":"Algorithm Metrics <p>This page was last updated on 2025-05-05 11:23:40 UTC</p>"},{"location":"leaderboard/#algorithm_metrics","title":"Algorithm Metrics Table","text":"Rank Algorithm Name Task/Data Metric 1 Metric 2 Metric 3 \ud83c\udfc5 1 Algo 1 Task A 0.85 0.75 0.65 \ud83c\udfc5 2 Algo 2 Task B 0.87 0.77 0.67 \ud83c\udfc5 3 Algo 3 Task C 0.89 0.79 0.69 \ud83c\udfc5 4 Algo 4 Task D 0.91 0.81 0.71 \ud83c\udfc5 5 Algo 5 Task E 0.93 0.83 0.73 \ud83c\udfc5 6 Algo 6 Task A 0.85 0.75 0.65 \ud83c\udfc5 7 Algo 7 Task B 0.87 0.77 0.67 \ud83c\udfc5 8 Algo 8 Task C 0.89 0.79 0.69 \ud83c\udfc5 9 Algo 9 Task D 0.91 0.81 0.71 \ud83c\udfc5 10 Algo 10 Task E 0.93 0.83 0.73 \ud83c\udfc5 11 Algo 11 Task A 0.85 0.75 0.65 \ud83c\udfc5 12 Algo 12 Task B 0.87 0.77 0.67 \ud83c\udfc5 13 Algo 13 Task C 0.89 0.79 0.69 \ud83c\udfc5 14 Algo 14 Task D 0.91 0.81 0.71 \ud83c\udfc5 15 Algo 15 Task E 0.93 0.83 0.73 \ud83c\udfc5 16 Algo 16 Task A 0.85 0.75 0.65 \ud83c\udfc5 17 Algo 17 Task B 0.87 0.77 0.67 \ud83c\udfc5 18 Algo 18 Task C 0.89 0.79 0.69 \ud83c\udfc5 19 Algo 19 Task D 0.91 0.81 0.71 \ud83c\udfc5 20 Algo 20 Task E 0.93 0.83 0.73"},{"location":"notebooks/sbml_dataloader/","title":"SBMLDataModule Dataloader","text":"<p>To load and simulate data from the SBML model, follow the steps below:</p> <p>Step 1: \ud83d\udce6 Import the module</p> In\u00a0[1]: Copied! <pre>import sys\nimport os\n\n# Go up to the root where `vpeleaderboard/` is located\nsys.path.append(os.path.abspath(\"../../\"))\n</pre> import sys import os  # Go up to the root where `vpeleaderboard/` is located sys.path.append(os.path.abspath(\"../../\"))  In\u00a0[2]: Copied! <pre>from vpeleaderboard.data.src.sbml_dataloader import SBMLDataModule\n</pre> from vpeleaderboard.data.src.sbml_dataloader import SBMLDataModule <pre>c:\\Users\\hsrak\\Documents\\VPELeaderboard\\myenv\\Lib\\site-packages\\tqdm\\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n</pre> <p>Step 2: \u2699\ufe0f Initialize the SBMLDataModule</p> <p>Initialize the module by specifying the model base name (without the .xml extension).</p> In\u00a0[3]: Copied! <pre># Initialize with model base name (without `.xml`)\nmodule = SBMLDataModule(file_name=\"BIOMD0000000537_url\")\n</pre> # Initialize with model base name (without `.xml`) module = SBMLDataModule(file_name=\"BIOMD0000000537_url\")  <p>Step 3: \ud83e\uddf9 Prepare the model and config</p> <p>Prepare the model by loading the configuration YAML and locating the SBML file.</p> In\u00a0[4]: Copied! <pre>module.prepare_data()  # Loads config YAML and locates SBML file\n</pre> module.prepare_data()  # Loads config YAML and locates SBML file <p>Step 4: \ud83e\udde0 Setup the SBML model</p> <p>Set up the model using the basico method.</p> In\u00a0[5]: Copied! <pre>module.setup()  # Loads the model using basico\n</pre> module.setup()  # Loads the model using basico  <p>Step 5: \ud83d\udcc8 Run simulation and access train DataFrame</p> <p>Run the simulation and extract the data into a Pandas DataFrame.</p> In\u00a0[6]: Copied! <pre># Load the dataloader\ntrain_loader = module.train_dataloader()\n\n# Extract the DataFrame directly from the dataset\ntrain_df = train_loader.dataset.data\n\n# Show simulation preview\ntrain_df\n</pre> # Load the dataloader train_loader = module.train_dataloader()  # Extract the DataFrame directly from the dataset train_df = train_loader.dataset.data  # Show simulation preview train_df  Out[6]: sR{serum} sgp130{serum} R_IL6_gp130{liver} IL6{serum} Ab{serum} R sR_IL6{gut} sR_IL6{liver} R_IL6_gp130{gut} Ab_sR{serum} ... sgp130{liver} sR_IL6_sgp130{gut} Ab{peripheral} sR_IL6_sgp130{liver} pSTAT3{gut} STAT3{liver} CRP Suppression (%) CRP (% of baseline) CRP{liver} geneProduct Time 0.0 4.253507 3.900000 0.000066 0.000436 2.381820e-29 0.438236 0.001307 0.000976 0.000084 6.104391e-26 ... 5.589699 0.136304 1.679209e-29 0.116344 9.389364 0.777537 -0.000000 100.000000 158.325847 159.803597 1.0 0.000031 3.901765 0.000064 0.000638 6.753452e+02 0.000178 0.001055 0.000951 0.000072 7.791481e+00 ... 5.591034 0.127067 2.144021e-01 0.114914 9.389266 0.777559 0.000001 99.999999 158.325653 159.802738 2.0 0.000037 3.905215 0.000062 0.000739 6.522828e+02 0.000070 0.000959 0.000916 0.000068 9.015753e+00 ... 5.594230 0.115733 4.442855e-01 0.110774 9.388692 0.777686 0.000029 99.999971 158.324515 159.797695 3.0 0.000043 3.907882 0.000060 0.000756 6.303828e+02 0.000049 0.000887 0.000868 0.000065 1.019966e+01 ... 5.597806 0.107157 6.659729e-01 0.105075 9.387640 0.777986 0.000156 99.999844 158.321844 159.788467 4.0 0.000049 3.909825 0.000058 0.000755 6.095828e+02 0.000039 0.000826 0.000817 0.000062 1.134655e+01 ... 5.600867 0.099879 8.798707e-01 0.098958 9.386196 0.778528 0.000495 99.999505 158.317000 159.775787 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 96.0 0.000960 3.900048 0.000008 0.000643 1.690247e+02 0.000086 0.000002 0.000002 0.000009 6.443776e+01 ... 5.581057 0.000269 8.875419e+00 0.000263 8.689731 1.591484 4.118263 95.881737 150.735143 153.432452 97.0 0.000972 3.900045 0.000007 0.000643 1.680433e+02 0.000087 0.000002 0.000002 0.000009 6.483892e+01 ... 5.581051 0.000258 8.918491e+00 0.000252 8.677568 1.605962 4.200370 95.799630 150.594039 153.317467 98.0 0.000984 3.900042 0.000007 0.000643 1.670710e+02 0.000088 0.000002 0.000002 0.000009 6.523864e+01 ... 5.581045 0.000247 8.961150e+00 0.000241 8.665300 1.620560 4.283303 95.716697 150.451544 153.201341 99.0 0.000995 3.900039 0.000007 0.000643 1.661073e+02 0.000089 0.000002 0.000002 0.000009 6.563691e+01 ... 5.581040 0.000237 9.003399e+00 0.000232 8.652927 1.635279 4.367068 95.632932 150.307646 153.084063 100.0 0.001007 3.900036 0.000007 0.000643 1.651518e+02 0.000090 0.000002 0.000002 0.000009 6.603375e+01 ... 5.581035 0.000228 9.045242e+00 0.000222 8.640447 1.650118 4.451671 95.548329 150.162334 152.965623 <p>101 rows \u00d7 44 columns</p> In\u00a0[7]: Copied! <pre># Load the dataloader\ntrain_loader = module.val_dataloader()\n\n# Extract the DataFrame directly from the dataset\ntrain_df = train_loader.dataset.data\n\n# Show simulation preview\ntrain_df\n</pre> # Load the dataloader train_loader = module.val_dataloader()  # Extract the DataFrame directly from the dataset train_df = train_loader.dataset.data  # Show simulation preview train_df Out[7]: sR{serum} sgp130{serum} R_IL6_gp130{liver} IL6{serum} Ab{serum} R sR_IL6{gut} sR_IL6{liver} R_IL6_gp130{gut} Ab_sR{serum} ... sgp130{liver} sR_IL6_sgp130{gut} Ab{peripheral} sR_IL6_sgp130{liver} pSTAT3{gut} STAT3{liver} CRP Suppression (%) CRP (% of baseline) CRP{liver} geneProduct Time 100.0 0.001007 3.900036 0.000007 0.000643 165.151830 0.000090 0.000002 1.885293e-06 0.000009 66.033750 ... 5.581035 0.000228 9.045242 0.000222 8.640447 1.650118 4.451671 95.548329 150.162334 152.965623 100.3 0.001011 3.900036 0.000007 0.000643 164.866762 0.000090 0.000002 1.863234e-06 0.000009 66.152523 ... 5.581034 0.000225 9.057716 0.000220 8.636683 1.654593 4.477216 95.522784 150.118463 152.929863 100.6 0.001014 3.900035 0.000007 0.000643 164.582401 0.000091 0.000002 1.841614e-06 0.000009 66.271167 ... 5.581032 0.000223 9.070154 0.000217 8.632909 1.659079 4.502837 95.497163 150.074463 152.893997 100.9 0.001018 3.900034 0.000007 0.000643 164.298740 0.000091 0.000002 1.820424e-06 0.000009 66.389683 ... 5.581031 0.000220 9.082556 0.000214 8.629125 1.663576 4.528535 95.471465 150.030335 152.858025 101.2 0.001021 3.900034 0.000007 0.000643 164.015772 0.000091 0.000002 1.799658e-06 0.000009 66.508072 ... 5.581030 0.000218 9.094922 0.000212 8.625332 1.668085 4.554309 95.445691 149.986077 152.821947 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 128.8 0.001380 3.900005 0.000005 0.000643 140.176195 0.000128 0.000001 9.195297e-07 0.000007 76.867934 ... 5.580976 0.000113 10.088813 0.000106 8.232916 2.131595 7.278681 92.721319 145.316474 149.008650 129.1 0.001384 3.900005 0.000005 0.000643 139.935180 0.000128 0.000001 9.159466e-07 0.000007 76.974824 ... 5.580976 0.000113 10.098145 0.000106 8.228154 2.137183 7.312435 92.687565 145.258702 148.961374 129.4 0.001388 3.900005 0.000005 0.000643 139.694472 0.000129 0.000001 9.124256e-07 0.000007 77.081590 ... 5.580976 0.000113 10.107447 0.000106 8.223382 2.142783 7.346285 92.653715 145.200767 148.913962 129.7 0.001392 3.900005 0.000005 0.000643 139.454070 0.000129 0.000001 9.089656e-07 0.000007 77.188233 ... 5.580976 0.000112 10.116719 0.000105 8.218598 2.148395 7.380231 92.619769 145.142669 148.866414 130.0 0.001397 3.900005 0.000005 0.000643 139.213971 0.000129 0.000001 9.055653e-07 0.000007 77.294752 ... 5.580975 0.000112 10.125962 0.000105 8.213803 2.154020 7.414273 92.585727 145.084408 148.818730 <p>101 rows \u00d7 44 columns</p> In\u00a0[8]: Copied! <pre># Load the dataloader\ntrain_loader = module.test_dataloader()\n\n# Extract the DataFrame directly from the dataset\ntrain_df = train_loader.dataset.data\n\n# Show simulation preview\ntrain_df\n</pre> # Load the dataloader train_loader = module.test_dataloader()  # Extract the DataFrame directly from the dataset train_df = train_loader.dataset.data  # Show simulation preview train_df Out[8]: sR{serum} sgp130{serum} R_IL6_gp130{liver} IL6{serum} Ab{serum} R sR_IL6{gut} sR_IL6{liver} R_IL6_gp130{gut} Ab_sR{serum} ... sgp130{liver} sR_IL6_sgp130{gut} Ab{peripheral} sR_IL6_sgp130{liver} pSTAT3{gut} STAT3{liver} CRP Suppression (%) CRP (% of baseline) CRP{liver} geneProduct Time 130.0 0.001397 3.900005 0.000005 0.000643 139.213971 0.000129 1.021915e-06 9.055653e-07 0.000007 77.294752 ... 5.580975 0.000112 10.125962 0.000105 8.213803 2.154020 7.414273 92.585727 145.084408 148.818730 130.5 0.001404 3.900005 0.000005 0.000643 138.814482 0.000130 1.016836e-06 9.000287e-07 0.000007 77.472009 ... 5.580975 0.000111 10.141299 0.000104 8.205787 2.163421 7.471227 92.528773 144.986941 148.738951 131.0 0.001411 3.900005 0.000005 0.000643 138.415819 0.000131 1.011916e-06 8.946486e-07 0.000007 77.648924 ... 5.580975 0.000111 10.156554 0.000103 8.197739 2.172857 7.528449 92.471551 144.889019 148.658791 131.5 0.001418 3.900005 0.000005 0.000643 138.017981 0.000132 1.007151e-06 8.894215e-07 0.000007 77.825496 ... 5.580975 0.000110 10.171727 0.000103 8.189660 2.182326 7.585942 92.414058 144.790638 148.578249 132.0 0.001426 3.900004 0.000005 0.000643 137.620962 0.000132 1.002538e-06 8.843432e-07 0.000006 78.001725 ... 5.580974 0.000109 10.186818 0.000102 8.181550 2.191830 7.643706 92.356294 144.691798 148.497322 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 178.0 0.002237 3.900000 0.000003 0.000643 104.073070 0.000217 8.993366e-07 7.262020e-07 0.000004 92.687652 ... 5.580967 0.000095 11.249528 0.000085 7.293227 3.216138 14.272712 85.727288 133.382560 139.173850 178.5 0.002248 3.900000 0.000003 0.000643 103.737957 0.000218 9.000409e-07 7.261637e-07 0.000004 92.829869 ... 5.580967 0.000095 11.257798 0.000085 7.281962 3.228905 14.360736 85.639264 133.232879 139.049463 179.0 0.002259 3.900000 0.000003 0.000643 103.403456 0.000219 9.007694e-07 7.261462e-07 0.000004 92.971691 ... 5.580967 0.000095 11.266003 0.000085 7.270662 3.241707 14.449138 85.550862 133.082567 138.924522 179.5 0.002269 3.900000 0.000003 0.000643 103.069566 0.000220 9.015220e-07 7.261493e-07 0.000004 93.113118 ... 5.580967 0.000095 11.274143 0.000085 7.259326 3.254543 14.537921 85.462079 132.931624 138.799027 180.0 0.002280 3.900000 0.000003 0.000643 102.736288 0.000221 9.022986e-07 7.261728e-07 0.000004 93.254148 ... 5.580967 0.000095 11.282218 0.000085 7.247955 3.267413 14.627084 85.372916 132.780047 138.672974 <p>101 rows \u00d7 44 columns</p>"},{"location":"notebooks/sbml_dataloader/#sbmldatamodule-dataloader","title":"SBMLDataModule Dataloader\u00b6","text":""},{"location":"user-guide/","title":"Getting started","text":""},{"location":"user-guide/#getting-started-with-vpeleaderboard","title":"Getting Started with VPELeaderboard","text":"<p>Welcome to VPELeaderboard, an open-source project developed by Team VPE. The primary objective of this project is to evaluate and benchmark the performance of advanced time series forecasting models when applied to simulated biological data. Unlike traditional methods that rely on handcrafted mathematical models, we focus on directly forecasting simulation results through AI-driven techniques. This leaderboard provides a comprehensive analysis of the strengths and limitations of these models, offering valuable insights into their effectiveness in predicting the dynamics of complex biological systems.</p> <p>Our toolkit currently consists of the following components:</p> <ul> <li>Data: Explore integrated datasets, including ordinary differential equation models in SBML format.</li> <li>Algorithms: A collection of cutting-edge algorithms that have been developed to tackle time series forecasting and predictive modeling tasks.</li> <li>Leaderboard: An interactive leaderboard that evaluates and compares the performance of time series forecasting models, focusing on how well they predict the trajectories of simulated biological processes.</li> </ul>"},{"location":"user-guide/#how-to-use-vpeleaderboard","title":"How to Use VPELeaderboard","text":"<p>Follow the steps below to get started with VPELeaderboard:</p>"},{"location":"user-guide/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Clone the repository to your local machine:</p> <pre><code>git clone https://github.com/your-username/VPELeaderboard.git\n</code></pre> <p>Ensure that you replace <code>your-username</code> with your actual GitHub username.</p>"},{"location":"user-guide/#2-set-up-the-environment","title":"2. Set Up the Environment","text":"<p>Ensure that your Python environment is properly set up:</p> <pre><code>python -m venv vpe-env\nsource vpe-env/bin/activate  # For macOS/Linux\nvpe-env\\\\Scripts\\\\activate     # For Windows\n</code></pre>"},{"location":"user-guide/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>Navigate to the project directory and install the required dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"user-guide/#contribute-your-models","title":"Contribute Your Models","text":"<p>To contribute new models to the leaderboard, please follow the instructions in the  How to Load and Contribute SBML Models section. This guide provides the necessary steps for preparing and submitting your models, ensuring they are automatically validated and integrated into the leaderboard system via our CI/CD pipeline.</p>"},{"location":"user-guide/#explore-tutorials","title":"Explore Tutorials","text":"<p>We provide a range of tutorials to assist you in using the platform effectively. Visit the Tutorials section in Data page for comprehensive guides and examples.</p>"},{"location":"user-guide/#benchmark-your-algorithm","title":"Benchmark Your Algorithm","text":"<p>With VPELeaderboard, you can benchmark the performance of your algorithm against others based on specific datasets and performance metrics.</p>"}]}